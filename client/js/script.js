// Generated by CoffeeScript 1.6.3
(function() {
  var Game;

  window.serverUrl = 'http://localhost:3000/socks_api';

  window.lastGame = 1;

  window.lastEvent = 1;

  Game = {
    id: 1,
    divId: 'game',
    url: 'http://localhost:3000/',
    subfield: 0,
    figure: 1,
    playername: null,
    pendingActions: null,
    socket: null,
    board: null,
    create: function() {
      var array, boardHtml, i, id, j, k, m, rowHtml, that, _i, _j, _k, _l, _m, _n;
      this.id = window.lastGame++;
      this.pendingActions = [];
      this.board = [];
      for (i = _i = 0; _i <= 8; i = ++_i) {
        array = [];
        for (j = _j = 0; _j <= 9; j = ++_j) {
          array.push(0);
        }
        this.board.push(array);
      }
      boardHtml = '<table class="game_board" cellspacing="0" cellpadding="0">';
      boardHtml += '<tbody>';
      for (i = _k = 0; _k <= 2; i = ++_k) {
        rowHtml = '<tr>';
        for (j = _l = 0; _l <= 2; j = ++_l) {
          rowHtml += '<td align="center">';
          rowHtml += '<table class="inner_board" cellspacing="0" cellpadding="0">';
          rowHtml += '<tbody>';
          for (k = _m = 0; _m <= 2; k = ++_m) {
            rowHtml += '<tr>';
            for (m = _n = 0; _n <= 2; m = ++_n) {
              id = 'game' + this.id + 'cell' + (i * 3 + j) * 9 + (k * 3 + m);
              rowHtml += '<td id="' + id + '" value=0 board="' + (i * 3 + j) + '" field="' + (k * 3 + m) + '"class="innertd" align="center"></td>';
            }
            rowHtml += '</tr>';
          }
          rowHtml += '</tbody>';
          rowHtml += '</table>';
          rowHtml += '</td>';
        }
        rowHtml += '</tr>';
        boardHtml += rowHtml;
      }
      boardHtml += '</tbody>';
      boardHtml += '</table>';
      that = this;
      $('#' + this.divId).html(boardHtml);
      return $('#' + this.divId + ' > table').on('click', 'td.innertd', function(e) {
        var board, field;
        board = $(this).attr('board');
        field = $(this).attr('field');
        return that.move(board, field);
      });
    },
    connect: function(url) {
      this.url = url;
      this.socket = new SockJS(this.url);
      this.socket.onclose = this.connectionDropped;
      this.socket.onmessage = function(message) {
        var error;
        try {
          message = JSON.parse(message);
        } catch (_error) {
          error = _error;
          return;
        }
        switch (message.method) {
          case "game_start":
            if (messsage.data.whoTurns === 0) {
              return this.figure = 1;
            } else {
              this.figure = 2;
              return this.waitForOponent();
            }
            break;
          case "board_update":
            this.board = message.data.fullboard;
            this.subfield = message.data.active;
            return this.updateBoard();
          case "game_end":
            return this.end(message.data.winner);
          case "update":
            return this[message.data.field] = message.data.name;
          case "disconnect":
            return new Messi('Opponent was disconnected. Restart the game?', {
              title: 'Opponent disconnected',
              buttons: [
                {
                  id: 0,
                  label: 'Yes',
                  val: 'Yes'
                }, {
                  id: 1,
                  label: 'No',
                  val: 'No'
                }
              ],
              callback: function(answer) {
                this.socket(close);
                if (answer === "Yes") {
                  this.create();
                  return this.connect(serverUrl);
                }
              }
            });
          case "ok":
            break;
          case "error":
        }
      };
      return console.log("connect finished");
    },
    start: function() {
      return alert("not implemented yet");
    },
    connectionDropped: function() {
      return new Messi('Connection lost', {
        title: 'Error',
        titleClass: 'anim error',
        buttons: [
          {
            id: 0,
            label: 'Close',
            val: 'X'
          }
        ]
      });
    },
    end: function(winnerName) {
      var winnerTitle;
      window.playedGames.push(this.id);
      winnerTitle = 'You have won!';
      if (winnerName !== this.playername) {
        winnerTitle = "You've lost.";
      }
      return new Messi('The game is finished' + winnerTitle + '. Start new game?', {
        title: winnerTitle,
        buttons: [
          {
            id: 0,
            label: 'Yes',
            val: 'Yes'
          }, {
            id: 1,
            label: 'No',
            val: 'No'
          }
        ],
        callback: function(answer) {
          this.socket(close);
          if (answer === "Yes") {
            this.create();
            return this.connect(serverUrl);
          }
        }
      });
    },
    move: function(board, field) {
      var callback, message, that;
      message = {
        method: "move",
        data: {
          board: board,
          field: field
        },
        id: window.lastEvent
      };
      this.socket.send(JSON.stringify(message));
      that = this;
      callback = function() {
        that.board[board][field] = that.figure;
        that.board[board][9] = that.board_winner(that.board[board]);
        that.updateBoard();
        return that.waitForOpponent();
      };
      callback.call();
      this.pendingActions.push({
        id: window.lastEvent,
        callback: callback
      });
      return window.lastEvent++;
    },
    updateBoard: function() {
      var i, id, image, imageUrl, j, _i, _j, _results;
      _results = [];
      for (i = _i = 0; _i <= 8; i = ++_i) {
        for (j = _j = 0; _j <= 8; j = ++_j) {
          if (this.board[i][j] !== 0) {
            id = 'game' + this.id + 'cell' + i * 9 + j;
            imageUrl = '';
            if (this.board[i][j] !== parseInt($('#' + id).attr("value"))) {
              if (this.board[i][j] === 1) {
                imageUrl = 'img/cross.png';
              }
              if (this.board[i][j] === 2) {
                imageUrl = 'img/knot.png';
              }
              image = '<img width="40px" height="40px" src="' + imageUrl + '"></image>';
              $('#' + id).html(image);
              $('#' + id).attr("value", this.board[i][j]);
            }
          }
        }
        if (this.board[i][9] !== 0) {
          imageUrl = '';
          if (this.board[i][9] === 1) {
            imageUrl = 'img/cross.png';
          }
          if (this.board[i][9] === 2) {
            imageUrl = 'img/knot.png';
          }
          id = 'game' + this.id + 'cell' + i * 9 + 5;
          _results.push($('#' + id).parents(".inner_board").css("background", "url(" + imageUrl + ") no-repeat center").css("background-size", "100% auto"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    waitForOponent: function() {},
    board_winner: function(board) {
      var all, test, tests, _i, _len;
      tests = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
      for (_i = 0, _len = tests.length; _i < _len; _i++) {
        test = tests[_i];
        all = board[test[0]] !== 0 && board[test[0]] === board[test[1]] && board[test[0]] === board[test[2]];
        if (all) {
          return board[test[0]];
        }
      }
      return 0;
    }
  };

  window.initGame = function(divId) {
    this.game = $.extend(true, {}, Game);
    this.game.divId = divId;
    this.game.create();
    return this.game.connect(serverUrl);
  };

  window.changeName = function() {
    return alert("not implemented yet");
  };

  window.showRules = function() {
    return new Messi('testtesttest', {
      title: 'Rules',
      modal: true
    });
  };

  window.notificate = function(text) {
    return new Notification("Tic-Tac-Toe", {
      body: text,
      icon: "http://memoriesofchocolate.files.wordpress.com/2010/09/knots-and-crosses-kavade.jpg"
    });
  };

  window.makeMove = function(cell) {
    var image;
    image = '<img src="img/cross.png" width="40px" height="40px"></img>';
    return $('#' + cell.id).html(image);
  };

}).call(this);
